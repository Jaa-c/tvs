<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.

int nova_lod = 0; 		// velikost nove vygenerovane lode, 0 = zadna lod, 1-3 = velikost
int lod_velikost_1 = 3;		// celkovy pocet lodi velikosti 1, ktery ma byt vygenerovan pro simulaci
int lod_velikost_2 = 3;
int lod_velikost_3 = 3;
int lod_dok_1 = 0;		// jaka lod se prave nachazi v doku 1
int lod_dok_2 = 0;
int lod_dok_3 = 0;
int lod_dok_1c = 0;		// jaka lod se prave nachazi v doku 1
int lod_dok_2c = 0;
int lod_dok_3c = 0;
int delka_vykladky_1 = 6;	// jak dlouho trva vylozit lod velikosti 1
int delka_vykladky_2 = 8;
int delka_vykladky_3 = 10;
broadcast chan dok1_pracuj;	// nakonec nepouzite, muze se hodit pozdeji, ale delalo to spis bordel
broadcast chan dok2_pracuj;
broadcast chan dok3_pracuj;
broadcast chan generuj;

int vylozeno = 0;

const int queue_size = 9; 	//celkovy pocet lodi, vygenerujeme frontu predem
int queue[queue_size];

bool isQueueFull() {
  int i;
  for(i = 0; i &lt; queue_size; i++) {
    if(queue[i] == 0)
      return false;
  }
  return true;
}

void enQueue(int nova_lod) {
  int i;
  for(i = 0; i &lt; queue_size; i++) {
    if(queue[i] == 0) {
      queue[i] = nova_lod;
      return;
    }
  }
}

int deQueue() {
  int boat = queue[0];
  int i;
  for(i = 0; i &lt; queue_size-1; i++) {
    queue[i] = queue[i+1];
  }
  queue[queue_size-1] = 0;
  return boat;
}

clock global;			// globalni hodiny</declaration><template><name x="8" y="8">pristav</name><parameter>int &amp;lod_dok_1, int &amp;lod_dok_2, int &amp;lod_dok_3</parameter><declaration>int currentBoat = -1;

</declaration><location id="id0" x="-1960" y="-536"><name x="-1984" y="-568">Fill_queue</name></location><location id="id1" x="-2352" y="-88"><name x="-2368" y="-64">konec</name></location><location id="id2" x="-2352" y="-256"><name x="-2336" y="-248">Prirad_lod</name><urgent/></location><location id="id3" x="-2352" y="-536"><name x="-2392" y="-568">Generuj_lod</name><urgent/></location><init ref="id0"/><transition><source ref="id0"/><target ref="id3"/><label kind="guard" x="-2216" y="-528">queue[queue_size-1] != 0</label></transition><transition><source ref="id3"/><target ref="id2"/><label kind="guard" x="-2192" y="-464">queue[0] &gt; 0 ||
(  lod_velikost_1 + 
   lod_velikost_2 + 
   lod_velikost_3  ) == 0</label><label kind="assignment" x="-2192" y="-352">currentBoat = deQueue()</label><nail x="-2200" y="-480"/><nail x="-2200" y="-328"/></transition><transition><source ref="id1"/><target ref="id1"/><nail x="-2392" y="-56"/><nail x="-2352" y="-16"/><nail x="-2312" y="-56"/></transition><transition><source ref="id2"/><target ref="id3"/><label kind="guard" x="-2496" y="-440">lod_dok_3 == 0 &amp;&amp;
currentBoat &gt; 0 &amp;&amp;
currentBoat &lt;= 3</label><label kind="synchronisation" x="-2448" y="-400">dok3_pracuj!</label><label kind="assignment" x="-2504" y="-360">lod_dok_3 = currentBoat</label></transition><transition><source ref="id2"/><target ref="id3"/><label kind="guard" x="-2712" y="-440">lod_dok_2 == 0 &amp;&amp;
currentBoat &gt; 0 &amp;&amp;
currentBoat &lt;= 2</label><label kind="synchronisation" x="-2656" y="-400">dok2_pracuj!</label><label kind="assignment" x="-2720" y="-360">lod_dok_2 = currentBoat</label><nail x="-2568" y="-280"/><nail x="-2568" y="-512"/></transition><transition><source ref="id2"/><target ref="id3"/><label kind="guard" x="-2888" y="-440">lod_dok_1 == 0 &amp;&amp;
currentBoat == 1</label><label kind="synchronisation" x="-2840" y="-400">dok1_pracuj!</label><label kind="assignment" x="-2904" y="-360">lod_dok_1 = currentBoat</label><nail x="-2752" y="-256"/><nail x="-2752" y="-536"/></transition><transition><source ref="id2"/><target ref="id1"/><label kind="guard" x="-2344" y="-152">currentBoat &lt;= 0 &amp;&amp;
lod_dok_1 + lod_dok_2 + lod_dok_3  == 0</label></transition></template><template><name>generator</name><parameter>broadcast chan &amp;generuj, int &amp;lod_velikost_1, int &amp;lod_velikost_2, int &amp;lod_velikost_3, int &amp;nova_lod</parameter><declaration>int posledni_lod = 0;
</declaration><location id="id4" x="0" y="48"><name x="-16" y="72">cekej</name></location><location id="id5" x="0" y="-200"><name x="-24" y="-240">zvol_lod</name></location><init ref="id4"/><transition><source ref="id4"/><target ref="id5"/><label kind="guard" x="-424" y="-96">!isQueueFull()</label><nail x="-312" y="112"/><nail x="-312" y="-296"/></transition><transition><source ref="id5"/><target ref="id4"/><label kind="guard" x="-280" y="-152">(posledni_lod != 1 ||
lod_velikost_2 + lod_velikost_3 == 0) &amp;&amp;
lod_velikost_1 &gt; 0</label><label kind="assignment" x="-280" y="-88">lod_velikost_1--,
posledni_lod = 1,
enQueue(1)</label><nail x="-288" y="-160"/><nail x="-288" y="-8"/></transition><transition><source ref="id5"/><target ref="id4"/><label kind="guard" x="336" y="-152">(posledni_lod != 3 ||
lod_velikost_1 + lod_velikost_2 == 0) &amp;&amp;
lod_velikost_3 &gt; 0</label><label kind="assignment" x="336" y="-88">lod_velikost_3--,
posledni_lod = 3,
enQueue(3)</label><nail x="328" y="-168"/><nail x="328" y="-16"/></transition><transition><source ref="id5"/><target ref="id4"/><label kind="guard" x="8" y="-152">(posledni_lod != 2 ||
lod_velikost_1 + lod_velikost_3 == 0) &amp;&amp;
lod_velikost_2 &gt; 0</label><label kind="assignment" x="8" y="-88">lod_velikost_2--,
posledni_lod = 2,
enQueue(2)</label><nail x="0" y="-112"/></transition></template><template><name>dok</name><parameter>broadcast chan &amp;dok_pracuj, int &amp;delka_vykladky_1, int &amp;delka_vykladky_2, int &amp;delka_vykladky_3, int &amp;lod_dok</parameter><declaration>int cas_vykladky = 0;
clock vykladani;

int get_cas_vykladky (int lod)
{
  if(lod == 1){
    return delka_vykladky_1;
  } else if(lod == 2){
    return delka_vykladky_2;
  } else {
    return delka_vykladky_3;
  }
}
</declaration><location id="id6" x="-8" y="-8"><name x="-32" y="16">Plny_dok</name><label kind="invariant" x="-32" y="32">vykladani &lt;= cas_vykladky</label></location><location id="id7" x="-8" y="-144"><name x="-32" y="-184">Volny_dok</name></location><init ref="id7"/><transition><source ref="id6"/><target ref="id7"/><label kind="assignment" x="-216" y="-72">lod_dok = 0</label><nail x="-112" y="-72"/></transition><transition><source ref="id7"/><target ref="id6"/><label kind="synchronisation" x="96" y="-120">dok_pracuj?</label><label kind="assignment" x="96" y="-72">vykladani := 0,
cas_vykladky = get_cas_vykladky(lod_dok)</label><nail x="88" y="-72"/></transition></template><template><name>pristav_chytry</name><parameter>int &amp;lod_dok_1, int &amp;lod_dok_2, int &amp;lod_dok_3</parameter><declaration>int currentBoat = 0;

int getBoat(int size) {
  int i;
  int index = -1;
  int boat;
  while(true) {
    for(i = 0; i &lt; queue_size; i++) {
      if(queue[i] == size) {
        index = i;
        i = queue_size; //break
      }
    }
    if(index == -1) {
      if(size == 1) return 0;
      size--; // no recursion they say
    }
  }

  boat = queue[index];
  for(i = index; i &lt; queue_size-1; i++) {
    queue[i] = queue[i+1];
  }
  queue[queue_size-1] = 0;
  return boat;
}</declaration><location id="id8" x="-72" y="48"><name x="-144" y="64">Prirad_lod</name></location><location id="id9" x="-72" y="168"><name x="-56" y="136">Konec</name></location><location id="id10" x="-64" y="-224"><name x="-72" y="-256">Generuj_lod</name></location><init ref="id10"/><transition><source ref="id10"/><target ref="id8"/><label kind="synchronisation" x="32" y="-128">generuj!</label><label kind="assignment" x="32" y="-72">currentBoat = getBoat(3)</label><nail x="24" y="-152"/><nail x="24" y="0"/></transition><transition><source ref="id9"/><target ref="id9"/><nail x="-40" y="216"/><nail x="-112" y="216"/></transition><transition><source ref="id8"/><target ref="id10"/><label kind="guard" x="-624" y="-120">currentBoat &lt;= 1</label><label kind="synchronisation" x="-624" y="-96">dok1_pracuj!</label><label kind="assignment" x="-624" y="-72">lod_dok_1= currentBoat</label><nail x="-632" y="-8"/><nail x="-632" y="-160"/></transition><transition><source ref="id8"/><target ref="id10"/><label kind="guard" x="-432" y="-120">currentBoat &lt;= 2</label><label kind="synchronisation" x="-432" y="-96">dok2_pracuj!</label><label kind="assignment" x="-432" y="-72">lod_dok_2 = currentBoat</label><nail x="-440" y="-24"/><nail x="-440" y="-160"/></transition><transition><source ref="id8"/><target ref="id10"/><label kind="guard" x="-240" y="-120">currentBoat &lt;= 3</label><label kind="synchronisation" x="-240" y="-96">dok3_pracuj!</label><label kind="assignment" x="-240" y="-72">lod_dok_3 = currentBoat</label><nail x="-248" y="-40"/><nail x="-248" y="-40"/><nail x="-248" y="-160"/></transition><transition><source ref="id8"/><target ref="id9"/><label kind="guard" x="-72" y="96">currentBoat == 0</label></transition></template><system>// Place template instantiations here.
gen = generator(generuj, lod_velikost_1, lod_velikost_2, lod_velikost_3, nova_lod);


dok1 = dok(dok1_pracuj, delka_vykladky_1, delka_vykladky_2, delka_vykladky_3, lod_dok_1);
dok2 = dok(dok2_pracuj, delka_vykladky_1, delka_vykladky_2, delka_vykladky_3, lod_dok_2);
dok3 = dok(dok3_pracuj, delka_vykladky_1, delka_vykladky_2, delka_vykladky_3, lod_dok_3);
prist = pristav(lod_dok_1, lod_dok_2, lod_dok_3);

//dok1c = dok(dok1_pracuj, delka_vykladky_1, delka_vykladky_2, delka_vykladky_3, lod_dok_1c);
//dok2c = dok(dok2_pracuj, delka_vykladky_1, delka_vykladky_2, delka_vykladky_3, lod_dok_2c);
//dok3c = dok(dok3_pracuj, delka_vykladky_1, delka_vykladky_2, delka_vykladky_3, lod_dok_3c);
//prist_chytry = pristav_chytry(lod_dok_1c, lod_dok_2c, lod_dok_3c);

// List one or more processes to be composed into a system.
system 	gen, 
	prist, dok1, dok2, dok3;
	//prist_chytry, dok1c, dok2c, dok3c;
</system></nta>